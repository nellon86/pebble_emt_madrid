<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Configuración EMT Madrid</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    h1 { font-size: 18px; }
    label { display: block; margin-top: 10px; }
    input, button { margin-top: 10px; padding: 10px; width: 100%; }
    ul { list-style: none; padding: 0; }
    li { background: #f2f2f2; margin: 5px 0; padding: 10px; display: flex; justify-content: space-between; }
    button.remove { background: red; color: white; border: none; }
    .save-btn { background-color: #007bff; color: white; border: none; margin-top: 20px; }
  </style>
</head>
<body>
  <h1>Configuración EMT Madrid</h1>
  <label for="linea-input">Añadir línea de autobús:</label>
  <input type="text" id="linea-input" placeholder="Ejemplo: 34, 55, 122">
  <button id="add-linea">Añadir línea</button>
  
  <h2>Líneas guardadas:</h2>
  <ul id="lineas-list"></ul>

  <button class="save-btn" id="save">Guardar y salir</button>

  <script>
    const lineaInput = document.getElementById("linea-input");
    const addButton = document.getElementById("add-linea");
    const lineasList = document.getElementById("lineas-list");
    const saveButton = document.getElementById("save");

    // Cargar líneas guardadas en localStorage
    let lineas = JSON.parse(localStorage.getItem("lineas")) || [];

    // Función para mostrar las líneas
    function renderLineas() {
      lineasList.innerHTML = "";
      lineas.forEach((linea, index) => {
        const li = document.createElement("li");
        li.innerHTML = `
          <span>${linea}</span>
          <button class="remove" data-index="${index}">Eliminar</button>
        `;
        lineasList.appendChild(li);
      });
    }

    // Añadir línea nueva
    addButton.addEventListener("click", () => {
      const linea = lineaInput.value.trim();
      if (linea && !lineas.includes(linea)) {
        lineas.push(linea);
        localStorage.setItem("lineas", JSON.stringify(lineas));
        lineaInput.value = "";
        renderLineas();
      }
    });

    // Eliminar línea
    lineasList.addEventListener("click", (e) => {
      if (e.target.classList.contains("remove")) {
        const index = e.target.getAttribute("data-index");
        lineas.splice(index, 1);
        localStorage.setItem("lineas", JSON.stringify(lineas));
        renderLineas();
      }
    });

    // Guardar configuración y enviar a Pebble
    saveButton.addEventListener("click", () => {
      const configData = JSON.stringify({ lineas });
      console.log("Enviando configuración:", configData);
      // Devolver configuración a Pebble
      if (window.Pebble) {
        Pebble.sendAppMessage({ config: configData });
      }
      // Cerrar la ventana de configuración
      window.close();
    });

    // Inicializar la lista
    renderLineas();
  </script>
</body>
</html>
